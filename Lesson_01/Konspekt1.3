1.3 Знакомство со средой разработки
Для начала необходимо узнать, что у Java существует 3 основных среды для разработки (это что-то типа Sublime, только профильные с различными инструментами): IntelliJ IDEA, NetBeans, Eclipse
  IntelliJ IDEA - более практичная и удобная среда
Для написания кода необходимо запустить программу - Create New Project - Java (не ставим нигде галочки) - Create Project from template - Java Hello World - Называю имя файла как и имя главного class - в панеле управления (слева) выбираю папку src, выбираю главный класс и переименовываю его на необходимый - Refactoring - Rename
Файл готов к работе!
 Далее пишу такой же код и нажимаю на плей, программа работает. 
 Полезные функции: 
ctrl+Tab - функция перехода к объявлению класса, метода или любого другого идентификатора в программе 
ctrl+P - подсказка какие параметры ещё может применять выбранный метод 
ctrl+Q - показывает документацию на выбранный метод
_____________________________________________________________________________
Любой идентификатор в программе можно переименовать, а среда разработки сама обновит ссылки во всех местах кода на измененнный идентификатор
Также можно переименовать Исходный class, среда также сама обновит наименование исходного файла (в папке src).
 Если не обновит, в коде необходимо rename to..

В jdk есть стандартный инструмент для генерации документации по исходному коду java doc - 
https://docs.oracle.com/en/java/javase/12/docs/api/
Html - cтраница, которой перечислены все классы, методы, поля 

						Комментарии
Практически все языки программирования позволяют оставлять в коде комментарии. Они никак не используются интерпретатором и НУЖНЫ ИСКЛЮЧИТЕЛЬНО ДЛЯ ЛЮДЕЙ, ЧТОБЫ ПРОГРАММИСТ ОСТАВЛЯЛ ПОМЕТКИ ДЛЯ СЕБЯ ИЛИ ДРУГИХ ПРОГРАММИСТОВ.
В Java есть 3 вида комментариев:
_____________________________________________________________________________
public class ZaOrdu {
    public static void main(String [] args) {
        System.out.println("- ZaOrdu?");
        System.out.println("- Тогорот!");
    }
}
_____________________________________________________________________________
1ые - Обычные однострочные комметраии: 
которые начинаются с // 
После этих двух символов может следовать любой текст, вся строчка не будет анализироваться и исполняться.
Комментарий может занимать всю строчку:
_____________________________________________________________________________
// For the Orcs!
_____________________________________________________________________________
public class ZaOrdu {
    public static void main(String [] args) {
        System.out.println("- ZaOrdu?");
        System.out.println("- Тогорот!");
	// For the Orcs!
    }
}
_____________________________________________________________________________
или может находиться на строчке после какого-нибудь кода:

System.out.print("ZaOrdu?"); // For the Orcs

_____________________________________________________________________________
public class ZaOrdu {
    public static void main(String [] args) {
        System.out.println("- ZaOrdu?"); // For the Orcs
        System.out.println("- Тогорот!");
    }
}
_____________________________________________________________________________
2ые - многострочные комментарии:
начинаются с /* 
и заканчиваются
             */
Принято каждую строчку начинать с символа *, хотя технически это и не обязательно.
/*
 * At the night the power of the Orcs grows up
 * and full of terrors
 */
System.out.print("I am the King");
_____________________________________________________________________________
public class ZaOrdu {
    public static void main(String [] args) {
         /*
         * At the night the power of the Orcs grows up
 	 * and full of terrors.
         */
        System.out.println("- ZaOrdu?");// For the Orcs
        System.out.println("- Тогорот!");
        // For the Orcs    
    }
}
_____________________________________________________________________________
3ие - Документирующие комментарии 
специальные комментарии, содержащие документацию:
начинаются 		/**
            		 *
заканчиваются            */
уже для них уже обязательно каждую строчку начинать с символа *
Документирующие комментарии, являясь, по сути, подвидом многострочных, несут дополнительную функцию – они могут быть собраны при помощи специальной утилиты javadoc и выданы в качестве документации к вашему коду.
Классы стандартной библиотеки, а также многих других сторонних библиотек снабжены такими javadoc комментариями, а среды разработки умеют удобно их показывать: (например ctrl+Q - показывает документацию на выбранный метод)
_____________________________________________________________________________
/**
 *A program that prints <code>ZaOrdu</code>
 * 
 * 
 */
public class ZaOrdu {
    public static void main(String [] args) {
         /*
         * At the night the power of the Orcs grows up
 	 * and full of terrors.
         */
        System.out.println("- ZaOrdu?");// For the Orcs
        System.out.println("- Тогорот!");
        // For the Orcs    
    }
}
_____________________________________________________________________________
В java doc можно использовать обычную html разметку и некоторые специальные теги, которые подскажет среда разработки:
_____________________________________________________________________________
/**
 *A program that prints <code>ZaOrdu</code>
 *
 * @author Sheriff Master
 * @version 1.0
 */
public class ZaOrdu {
    /**
     *Programm entry point
     * @param args command-line arguments 
     */
    public static void main(String [] args) {
	/*
         * At the night the power of the Orcs grows up
 	 * and full of terrors.
         */
        System.out.println("- ZaOrdu?");// For the Orcs
        System.out.println("- Тогорот!");
        // For the Orcs  
    }
}
_____________________________________________________________________________
Также любая среда имеет удобную функцию форматирования кода, когда Вам попался код без отступов (сделать это можно при помощи Shift+Tab), можно отформатировать его при помощи функции via Ctrl+Alt+shift+L
Shift+F6 - можно поменять любой метод по всему файлу (привести к одному наименованию по всему коду)

Запускается написанная программа через выбор главного класса (во вкладке) - Run Main (либо Shift+Ctrl+F10)
После запуска автоматически создается Конфигурация запкска, которую можно посмотреть и настроить через Команды: 
Main - Edit configurations
В данном меню можно указать различные настройки написанной программы. В одном проекте может быть много конфигураций запуска. 
Пример: - Можно указать Придаваемые аргументы командной строки
Main - Edit configurations - Program arguments - ввод аргументов A B C - жук (дебаг) 
Перед выполнением команды Debug нужно поставить точку на System.out.println("- ZaOrdu?"), чтобы останова программы остановится на паузу в том месте, чтобы я мог постметреть значения переменных (ну то есть, если ты не будешь ставить точки останова, то у тебя программа выполнится и завершит свою работу, а если поставишь точку останова, то прога в том месте станет на паузу).
Можно также распечатать аргументы A B C 
_____________________________________________________________________________
/**
 *A program that prints <code>ZaOrdu?</code>
 *
 * @author Sheriff Master
 * @version 1.0
 */
public class ZaOrdu {
    /**
     *Programm entry point.
     *
     * @param cmdLineArgs command-line arguments
     */
    public static void main(String [] cmdLineArgs) {
        System.out.println("- ZaOrdu?");
        System.out.println("- Заебись?");

        //вывели аргументы на экран
        //cmdLineArgs - это массив
        System.out.println(cmdLineArgs[0]); // выводим на экран нулевой элемент массива
        System.out.println(cmdLineArgs[1]); // выводим на экран первый элемент массива
        System.out.println(cmdLineArgs[2]); // выводим на экран второй элемент массива

//         for(int i = 0; i < cmdLineArgs.length; i++)
//             System.out.println(cmdLineArgs[i]);

         System.out.println("> The end");
    }
}
_____________________________________________________________________________
Получаем: 
/usr/lib/jvm/jdk-12.0.2/bin/java -javaagent:/home/sheriff/idea-IC-191.7479.19/lib/idea_rt.jar=36453:/home/sheriff/idea-IC-191.7479.19/bin -Dfile.encoding=UTF-8 -classpath /home/sheriff/IdeaProjects/ZaOrdu/out/production/ZaOrdu ZaOrdu A B C
- ZaOrdu?
- Заебись?
A
B
C
> The end

Process finished with exit code 0
_____________________________________________________________________________




